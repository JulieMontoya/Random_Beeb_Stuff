product=&70
multiplicand=&74
multiplier=&70
preload=&72
dividend=&70
divisor=&74
quotient=&70
remainder=&72

lh_operand = &70
rh_operand = &74

calc_stk = &7000
calc_sp = &7E
scratch_X = &7F
neg_flag = &7F

\  POINTERS ARE IN &80 - &8F

code_ptr = &80
str_ptr = &82
for_ptr = &88

code_ofs = &87

osasci = &FFE3
oswrch = &FFEE
osword = &FFF1

CLEAR &6F00,&7100
ORG &7100

.init_calc_stk
    JMP real_init_calc_stk
.disp_dec_stk
    JMP real_disp_dec_stk
.pushAX
    JMP real_pushAX
.ext_mul_stk
    JMP mul_stk
.ext_div_stk
    JMP div_stk
.twc16
    JMP real_twc16
.parse_num_stk
    JMP real_parse_num_stk
.dup
    JMP real_dup
.ext_signed_divide
    JMP signed_divide
.conv_str_stk
    JMP real_conv_str_stk

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\  INITIALISE CALCULATION STACK

.real_init_calc_stk
    LDA #&FC
    STA calc_sp
._rts
    RTS

\  PUSH ACCUMULATOR ONTO CALCULATION STACK

.real_pushA
    DEC calc_sp         \  decrease calc stack pointer
    LDY calc_sp
    STA calc_stk,Y      \  store at top of stack
    RTS

\  PUSH A 16-BIT VALUE FROM A (LO) AND X (HI) ONTO THE CALCULATION STACK
\  ON ENTRY, X => LOCATION OF DATA IN ZP

.real_pushAX
    LDY calc_sp
    JSR _push_core
    TXA
    JSR _push_core
    STY calc_sp
    RTS
    
\  PUSH A 16-BIT VALUE FROM ZERO PAGE ONTO THE CALCULATION STACK
\  ON ENTRY, X => LOCATION OF DATA IN ZP

.push16
    LDY calc_sp
    JSR _push16_2
    STY calc_sp
    RTS
._push16_2
    JSR _push16_1
._push16_1
    LDA 0,X
    INX
._push_core
    DEY
    STA calc_stk,Y
    RTS
    
\  PULL ACCUMULATOR FROM CALCULATION STACK

.real_pullA
    LDY calc_sp
    LDA calc_stk,Y      \  retrieve from top of stack
    INC calc_stk        \  increase calc stack pointer
    RTS

\  PULL A 16-BIT VALUE FROM THE CALCULATION STACK AND STORE IN ZERO PAGE
\  ON ENTRY, X => LOCATION IN ZP FOR DATA

.pull16
    LDY calc_sp
    JSR _pull16_2
    STY calc_sp
    RTS
._pull16_2
    JSR _pull16_1
._pull16_1
    JSR _pull_core
    STA 1,X
    DEX
    RTS
._pull_core
    LDA calc_stk,Y
    INY
    RTS
    
\  DUP : DUPLICATE THE VALUE AT THE TOP OF THE CALCULATION STACK
\

.real_dup
    LDY calc_sp
    JSR _dup2
    STY calc_sp
    RTS
._dup2
    JSR _dup1
._dup1
    DEY
    LDA calc_stk+2,Y
    STA calc_stk,Y
    RTS
    
\  GET LEFT AND RIGHT OPERANDS FROM STACK

.get_both
    JSR get_rho
.get_lho
    LDX #lh_operand
    JMP pull16
.get_rho
    LDX #rh_operand
    JMP pull16

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\

.vdu_stk
    JSR get_rho
    LDA rh_operand
    JMP oswrch
    
.vdw_stk
    JSR get_rho
    LDA rh_operand
    JSR oswrch
    LDA rh_operand+1
    JMP oswrch

\  DISPLAY A DECIMAL NUMBER FROM TOP OF STACK

.real_disp_dec_stk
    JSR decode_dec_stk
._dds3
    LDA neg_flag
    BPL _dds4
    LDA #45
    JSR osasci
._dds4
    LDA calc_stk-1,X
    JSR osasci
    DEX
    BNE _dds4
    RTS
    
\  STORE STRING REPRESENTATION OF A NUMBER IN MEMORY

.real_conv_str_stk
    LDX #str_ptr        \  destination to store string
    JSR pull16
    JSR decode_dec_stk
    LDY #0
    LDA neg_flag
    BPL _cvs2
    LDA #45
    STA (str_ptr),Y
    INY
._cvs2
    LDA calc_stk-1,X
    STA (str_ptr),Y
    INY
    DEX
    BNE _cvs2
    LDA #13             \  final character is CR
    STA (str_ptr),Y
    RTS
    
    RTS

.decode_dec_stk
    LDY calc_sp
    LDA calc_stk,Y
    STA neg_flag
    BPL _dds_pos
    JSR real_twc16
    LDA #128
._dds_pos
    \  We are going to divide the top of the stack ...
    LDX #dividend
    JSR pull16
    \  ... by 10
    LDA #10
    JSR set_divisor
    TAX                 \  we know A=0 here
._dds1
    JSR real_div16
    \  Store the digit's ASCII code in scratch space
    LDA remainder
    CLC
    ADC #48
    CMP #58             \  see if we need to correct a hex digit
    BCC _dds2
    ADC #6              \  here, C=1 so we add one fewer than we need
._dds2
    STA calc_stk,X
    INX
    \  See if working total has reached zero
    LDA dividend
    ORA dividend+1
    BNE _dds1
._dds_end
    RTS

\  PARSE A NUMBER AND PLACE IT ON THE STACK

.real_parse_num_stk
    LDX #str_ptr        \  set up string pointer
    JSR pull16
.parse_num_at_ptr
    LDA #10
    JSR set_multiplicand
    STA neg_flag        \  here we know A=0
    TAX
._pn0
    STA product,X
    INX
    CPX #4
    BCC _pn0
    TAY
._pn1
    LDA (str_ptr),Y
    CMP #32
    BEQ _pn_space
    BCC _pn_notdigit
    CMP #45
    BEQ _pn_minus
    CMP #58
    BCS _pn_notdigit
    CMP #48
    BCC _pn_notdigit
    SEC
    SBC #48
    STA product+2       \  store it in the preload register
    LDA #0
    STA product+3
    JSR mult16_preload  \  multiply total by 10 and add new digit
._pn_space
    INY
    BNE _pn1
._pn_notdigit
    LDX #product
    JSR push16
    LDA neg_flag
    BPL _pn_pos
    JSR real_twc16
._pn_pos
    RTS
._pn_minus
    LDA #255
    STA neg_flag
    BNE _pn_space       \  always branches
    RTS

\  STORE A WORD IN MEMORY -- ! OPERATOR / VARIABLE ASSIGNMENT

.store_word
   JSR get_both
   LDY #0
   LDA lh_operand
   STA (rh_operand),Y
   INY
   LDA lh_operand+1
   STA (rh_operand),Y
   RTS
    
\  READ A WORD FROM MEMORY -- ! OPERATOR (RHS)

.read_word
    JSR get_rho
    LDY #0
    LDX calc_sp
    JSR _rw2
    STX calc_sp
    RTS
._rw2
    JSR _rw1
._rw1
    LDA (rh_operand),Y
    INY
    DEX
    STA calc_stk,X
    RTS

\  READ A STRING FROM THE KEYBOARD -- INPUT $

.input_str
    LDY #0              \  create control block in ZP at str_ptr
    STY str_ptr         \  byte 0 => address low
    LDA #7
    STA str_ptr+1       \  byte 1 => address high
    LDA #255
    STA str_ptr+2       \  byte 2 => maximum length
    STA str_ptr+4       \  byte 4 => maximum ASCII code
    LDA #32
    STA str_ptr+3       \  byte 3 => minimum ASCII code
    TYA
    LDX #str_ptr
    JSR osword          \  OSWORD 0 => INPUT
    RTS                 \  with string at &700

\  READ A NUMBER FROM THE KEYBOARD -- INPUT

.input_num
    JSR input_str
    JMP parse_num_at_ptr
    \  Now we have a numeric value on the stack
    
    
    
.input_cblk
    EQUW &700           \  bytes 0-1 => address
    EQUB 255            \  byte 2 => maximum length
    EQUB 32             \  byte 3 => minimum ASCII code
    EQUB 255            \  byte 4 => maximum ASCII code

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\  MONADIC OPERATIONS
\
\  TWOS-COMPLEMENT THE TOP OF THE STACK
\

.real_twc16
    LDY calc_sp
    SEC                 \  so as to add 1 when we flip the bits
    LDA #0
    SBC calc_stk+1,Y
    STA calc_stk+1,Y
    LDA #0
    SBC calc_stk,Y
    STA calc_stk,Y
    RTS

.twc16_lhs
    LDX #lh_operand
.twc16_zpX
    LDY calc_sp
    SEC                 \  so as to add 1 when we flip the bits
    LDA #0
    SBC 0,X
    STA 0,X
    LDA #0
    SBC 1,X
    STA 1,X
    RTS

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\

.mult16
.real_mult16
    LDA #0
    STA product+3
    STA product+2
.mult16_preload
    TXA                 \  save X and Y on 6502 stack
    PHA
    TYA
    PHA
    \  Begin by shifting the multiplier right so its lowest bit is already
    \  in the carry flag.
    LDY #17             \  one more than we need
    BNE _mult16_3       \  always branches; A = 0
._mult16_1
    BCC _mult16_2
    \  Add the multiplicand to the high word of the product
    CLC
    LDA product+2
    ADC multiplicand
    STA product+2
    LDA product+3
    ADC multiplicand+1
    STA product+3
    \  Shift the product right
._mult16_2
    ROR product+3
    ROR product+2
._mult16_3
    ROR product+1
    ROR product
    \  See if we need to go around again
    DEY
    BNE _mult16_1
    
    PLA                 \  retrieve Y and X from 6502 stack
    TAY
    PLA
    TAX
    RTS

\  This is the same bit of code with 2 different names

.set_divisor
.set_multiplicand
    STA multiplicand
    LDA #0
    STA multiplicand+1
    RTS
    
\  DIVIDE ONE 16-BIT NUMBER BY ANOTHER
    
.real_div16
.divide_no_rem
    LDA #0
    STA remainder
    STA remainder+1
.divide
    TXA                 \  save X and Y on 6502 stack
    PHA
    TYA
    PHA
    JSR div_core
    PLA                 \  retrieve Y and X from 6502 stack
    TAY
    PLA
    TAX
    RTS

\  SIGNED DIVISION.  THIS WORKS BY KEEPING THE DIVIDEND AND DIVISOR POSITIVE
\  AND USING neg_flag TO INDICATE WHAT IF ANYTHING NEEDS TO BE MADE NEGATIVE
\  AFTER THE OPERATION IS COMPLETE.

.signed_divide
    LDA #0
    STA remainder
    STA remainder+1
.signed_div_ext
    TXA                 \  save X and Y on 6502 stack
    PHA
    TYA
    PHA
    LDA #0
    STA neg_flag
    LDA dividend+1
    BPL positivify_divr
    LDA #&C0            \  set bits 7 and 6
    STA neg_flag
    LDX #dividend       \  twos-complement it
    JSR twc16_zpX
.positivify_divr
    LDA divisor+1
    BPL _pos_dvr1
    LDA neg_flag
    EOR #&80
    STA neg_flag
    LDX #divisor        \  twos-complement it
    JSR twc16_zpX
._pos_dvr1
    JSR div_core
    BIT neg_flag
    BPL _sd_quot_pos
    LDX #quotient
    JSR twc16_zpX       \  negativify the quotient
._sd_quot_pos
    BIT neg_flag
    BVC _sd_rem_pos
    LDX #remainder
    JSR twc16_zpX       \  negativify the remainder
._sd_rem_pos
    PLA                 \  retrieve Y and X from 6502 stack
    TAY
    PLA
    TAX
    RTS
    
\  CORE DIVISION ROUTINE.  THIS TRASHES REGISTERS .....

.div_core
    LDY#17              \  one more than we need
    BNE _divide_3       \  do an extra left shift on just bottom bits
._divide_1
    ROL dividend+2
    ROL dividend+3
._divide_2
    SEC
    LDA dividend+2
    SBC divisor
    TAX \ stash low byte in X in case we need it
    LDA dividend+3
    SBC divisor+1
    BCC _divide_3
    \ update dividend if we had room to subtract
    STX dividend+2
    STA dividend+3
._divide_3
    ROL dividend      \ C shifts into divd
    ROL dividend+1
    DEY
    BNE _divide_1
    \  dividend, dividend+1 now contain quotient
    \  dividend+2, dividend+3 contain remainder
    RTS

\  MULTIPLY TWO NUMBERS AT TOP OF STACK
    
.mul_stk
    JSR get_both
.mul_in_place
    JSR real_mult16
.return_stk
    LDX #product
    JMP push16

\  DIVIDE NUMBER JUST BELOW TOP OF CALCULATION STACK BY NUMBER ON TOP
\  RETURN QUOTIENT ON TOP OF CALCULATION STACK
    
.div_stk
    JSR get_both
.div_in_place
    JSR signed_divide
    JMP return_stk

\  DIVIDE NUMBER JUST BELOW TOP OF CALCULATION STACK BY NUMBER ON TOP
\  RETURN QUOTIENT ON TOP OF CALCULATION STACK
    
.real_mod_stk
    JSR get_both
.mod_in_place
    CLC
    BCC adc16_in_place  \  always branches
    JSR signed_divide
.return_ext
    LDX #product+2      \  return remainder
    JMP push16

\  ADD TWO NUMBERS AT TOP OF CALCULATION STACK
\  RETURN SUM ON TOP OF CALCULATION STACK

.add16_in_place
    CLC
    BCC adc16_in_place  \  always branches
.add16_stk
    CLC
.adc16_stk
    JSR get_both
    LDX #0
.adc16_in_place
    JSR _adc_2
    JMP return_stk
._adc_2
    JSR _adc_1
._adc_1
    LDA lh_operand,X
    ADC rh_operand,X
    STA lh_operand,X
    INX
    RTS
    
\  SUBTRACT NUMBER AT TOP OF CALCULATION STACK FROM NUMBER BELOW IT
\  RETURN DIFFERENCE ON TOP OF CALCULATION STACK

.sub16_in_place
    SEC
    BCS sbc16_in_place  \  always branches
.sub16_stk
    SEC
.sbc16_stk
    JSR get_both
.sbc16_in_place
    LDX #0
    JSR _sbc_2
    JMP return_stk
._sbc_2
    JSR _sbc_1
._sbc_1
    LDA lh_operand,X
    SBC rh_operand,X
    STA lh_operand,X
    INX
    RTS

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\  

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\

ALIGN &100

.instr_table
    EQUW _rts           \ 00 => RTS
    EQUW real_dup       \ 01 => DUP
    EQUW read_word      \ 02 => RDW
    EQUW store_word     \ 03 => WRW
    EQUW real_disp_dec_stk  \ 04 => PRN
    EQUW vdu_stk        \ 05 => VDU
    EQUW vdw_stk        \ 06 => VDW = two-byte VDU;
    EQUW mul_stk        \ 07 => MUL
    EQUW div_stk        \ 08 => DIV
    EQUW real_mod_stk   \ 09 => MOD
    EQUW add16_stk      \ 0A => ADD
    EQUW sub16_stk      \ 0B => SUB
    

._code_end

SAVE "M.CODE", calc_stk, _code_end, _rts

PRINT "init_calc_stk =", ~init_calc_stk

