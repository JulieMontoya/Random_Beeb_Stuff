#!/usr/bin/perl -w
#!/opt/local/bin/perl -w
use strict;
use constant { TRUE => 1, FALSE => "" };
use Data::Dumper;
use Getopt::Std;

##########################  HUFFMAN TREE  NODE CLASS  ##########################

package HuffmanTree::Node;
use strict;
require Exporter;

use constant { TRUE => "1", FALSE => "" };

our @ISA = qw/Exporter/;
our @EXPORT_OK = qw/new/;

my $_serial;

sub new {
    my $proto = shift;                  #  MAGIC - DO NOT TRY TO UNDERSTAND THIS
    my $class = ref($proto) || $proto;  #  MAGIC - DO NOT TRY TO UNDERSTAND THIS

    my $freq = shift // 0;
    my $payload = shift;

    my $self = { "_serial"   => ++$_serial,
                "_parent"   => undef,
                "_child0"   => undef,
                "_child1"   => undef,
                "_tree"     => undef,
                "_tree_pos" => undef,
                "_freq"     => $freq,
                "_path_to"  => "",
                "_payload"  => $payload };

    bless $self, $class;                #  MAGIC - DO NOT TRY TO UNDERSTAND THIS
    return $self;
};

sub set_left_child {
    my $self = shift;
    return undef unless $self;

    my $left_child = shift;
    $self->{"_child0"} = $left_child;
    # $self->{"_is_leaf"} = FALSE;
    $left_child->{"_parent"} = $self;
    $left_child->{"_path_to"} = $self->{"_path_to"} . "0";
    $self->{"_freq"} += $left_child->{"_freq"};
    $self;
};

sub set_right_child {
    my $self = shift;
    return undef unless $self;

    my $right_child = shift;
    $self->{"_child1"} = $right_child;
    # $self->{"_is_leaf"} = FALSE;
    $right_child->{"_parent"} = $self;
    $right_child->{"_path_to"} = $self->{"_path_to"} . "1";
    $self->{"_freq"} += $right_child->{"_freq"};
    $self;
};

sub parent {
    my $self = shift;
    $self->{"_parent"};
};

sub left_child {
    my $self = shift;
    $self->{"_child0"};
};

sub right_child {
    my $self = shift;
    $self->{"_child1"};
};

sub serial {
    my $self = shift;
    $self->{"_serial"};
};

sub freq {
    my $self = shift;
    $self->{"_freq"};
};

sub payload {
    my $self = shift;
    $self->{"_payload"};
};

sub left_payload {
    my $self = shift;
    my $left_child = $self->{"_child0"};
    return undef unless defined $left_child;
    $left_child->is_leaf ? $left_child->payload : undef;
};

sub right_payload {
    my $self = shift;
    my $right_child = $self->{"_child1"};
    return undef unless defined $right_child;
    $right_child->is_leaf ? $right_child->payload : undef;
};

sub is_leaf {
    my $self = shift;
    !(defined $self->{"child0"} || defined $self->{"_child1"});
};

sub is_orphan {
    my $self = shift;
    !defined $self->{"_parent"};
};

sub depth {
    my $self = shift;
    my $parent = $self->{"_parent"};
    if (defined $parent) {
        return 1 + $parent->depth;
    }
    else {
        return 0;
    };
};

sub below {
    my $self = shift;
    my $left_child = $self->{"_child0"};
    my $right_child = $self->{"_child1"};
    if (!defined $left_child && !defined $right_child) {
        return 0;
    }
    else {
        my $left_below = $left_child->below;
        my $right_below = $right_child->below;
        if ($left_below > $right_below) {
            return 1 + $left_below;
        }
        else {
            return 1 + $right_below;
        }
    };
};

sub printable {
    $_ = shift;
    if (/[^!#-%'-\/1-~]/) {
        return sprintf "&%02X", unpack "C", $_;
    }
    else {
        return $_;
    };
};

sub cumulative_payload {
    my $self = shift;
    if (!defined $self) {
        return ();
    };
    
    my $left_child = $self->{"_child0"};
    my $right_child = $self->{"_child1"};
    my $payload = $self->{"_payload"};
    my @payload = defined $payload ? (printable $payload) : ();
    my (@left_cpl, @right_cpl);
    
    if (!defined $left_child && !defined $right_child) {
        return @payload;
    }
    elsif (defined $left_child && !defined $right_child) {
        @left_cpl = cumulative_payload $left_child;
        return (@left_cpl, @payload);
    }
    elsif (!defined $left_child && defined $right_child) {
        @right_cpl = cumulative_payload $right_child;
        return (@payload, @right_cpl);
    }
    else {
        @left_cpl = cumulative_payload $left_child;
        @right_cpl = cumulative_payload $right_child;
        return (@left_cpl, @payload, @right_cpl);        
    };
};

sub all_children {
    my $self = shift;
    #printf "all_children called on: %s\n", ref $self;
    if (ref $self !~ /Node/) {
        return ();
    };
    
    my $left_child = $self->{"_child0"};
    my $right_child = $self->{"_child1"};
    my (@left_children, @right_children);
    
    if (!ref $left_child && !ref $right_child) {
        return ($self);
    }
    elsif (ref $left_child && !ref $right_child) {
        @left_children = all_children $left_child;
        return (@left_children, $self);
    }
    elsif (!ref $left_child && ref $right_child) {
        @right_children = all_children $right_child;
        return ($self, @right_children);
    }
    else {
        @left_children = all_children $left_child;
        @right_children = all_children $right_child;
        return (@left_children, $self, @right_children);        
    };
};

sub path_to {
    my $self = shift;
    my $parent = $self->{"_parent"};
    if (defined $parent) {
        if ($parent->{"_child0"}->{"_serial"} == $self->{"_serial"}) {
            return $parent->path_to . "0";
        }
        else {
            return $parent->path_to . "1";
        } 
    }
    else {
        return "";
    };
};

1;                                      #  MAGIC - DO NOT TRY TO UNDERSTAND THIS

#############################  HUFFMAN TREE CLASS  #############################

package HuffmanTree;
use strict;
use Data::Dumper;
require Exporter;

use constant { TRUE => "1", FALSE => "" };

our @ISA = qw/Exporter/;
our @EXPORT_OK = qw/new_node/;

sub new {
    my $proto = shift;                  #  MAGIC - DO NOT TRY TO UNDERSTAND THIS
    my $class = ref($proto) || $proto;  #  MAGIC - DO NOT TRY TO UNDERSTAND THIS

    my $self = { "_nodes" => [],
                "_root" => undef };
    
    bless $self, $class;                #  MAGIC - DO NOT TRY TO UNDERSTAND THIS
    return $self;
};

sub attach_node {
    my $self = shift;
    my $node = shift;
    my $pos = scalar $self->{"_nodes"};
    $node->{"_tree"} = $self;
    $node->{"_tree_pos"} = $pos;
    push @{$self->{"_nodes"}}, $node;
    $self;
};

sub set_root {
    my $self = shift;
    my $node = shift;
    $self->{"_root"} = $node;
    $self;
};

sub root {
    my $self = shift;
    $self->{"_root"};
};

sub nodes {
    my $self = shift;
    $self->{"_nodes"};
};

sub size {
    my $self = shift;
    scalar (@{$self->{"_nodes"}});
};

# sub orphans {
#     my $self = shift;
#     my $node;
#     print "argument for orphans is $self\n";
#     #print Dumper $self; 
#     my @orphans;
#     my @nodes = @{$self->{"_nodes"}};
#     # print Dumper \@nodes;
#     foreach $node (@nodes) {
#         #print "Node is $node\n";
#         #print Dumper \$node;
#         push @orphans, $node if $node->is_orphan;
#     };
#     @orphans;
# };

sub orphans {
    my $self = shift;
    my @orphans;
    foreach (@{$self->{"_nodes"}}) {
        push @orphans, $_ if $_->is_orphan;
    };
    @orphans;
};

sub leaves {
    my $self = shift;
    my @leaves;
    foreach (@{$self->{"_nodes"}}) {
        push @leaves, $_ if $_->is_leaf;
    };
    @leaves;
};

sub naked {
    my $self = shift;
    my @naked;
    foreach (@{$self->{"_nodes"}}) {
        push @naked, $_ if $_->is_naked;
    };
};

sub get_by_pos {
    my $self = shift;
    my $pos = shift;
    $self->{"_nodes"}[$pos];
};

1;                                      #  MAGIC - DO NOT TRY TO UNDERSTAND THIS

# ##############################  THE MAIN PROGRAM  ##############################

package main;
use strict;
use DBI;

my $DB_NAME = "advtest1";
my $DB_HOST = "localhost";
my $DB_USER = "julie";
my $DB_PASS = "clamdigger";

my %OPTIONS;
getopts "d:i:o:p:q:svw", \%OPTIONS;

my ($word, %word, @words, %dict, $saving, %saving);

my $filename    = $OPTIONS{"i"};
my $CHUNK_SIZE  = 256;
my $OUTPUT_FILE = $OPTIONS{"o"};
my $DIGRAPH_MIN = $OPTIONS{"d"};
my $VERBOSE     = $OPTIONS{"v"};
my $MSG_PREFIX  = $OPTIONS{"p"} || "msg";
my $SPLIT_FILES = $OPTIONS{"s"};
my $WRITE_DB    = $OPTIONS{"w"};
my $data = "";
my $need_label = FALSE;
my $SHOW_OUTPUT = FALSE;

my ($TREE_FILE, $MTABLE_FILE, $STREAM_FILE);
if ($OUTPUT_FILE) {
    $TREE_FILE = $MTABLE_FILE = $STREAM_FILE = $OUTPUT_FILE;
    $TREE_FILE =~ s/(\.[^.]*)?$/_tree$1/;
    $MTABLE_FILE =~ s/(\.[^.]*)?$/_mtable$1/;
    $STREAM_FILE =~ s/(\.[^.]*)?$/_stream$1/;
    
    printf "Tree file is '%s'\n", $TREE_FILE;
    printf "Message table file is '%s'\n", $MTABLE_FILE;
    printf "Stream file is '%s'\n", $STREAM_FILE;
};

# exit;

my (@dict_table, @msg_table, @dict_source, @msg_source);
my ($letter1, $letter2, $digraph, $data1);
my $message = 0;

my ($length, $char, $freq, %freq, $chars, $i);
my ($left_child, $right_child, $j);

my ($tree, @orphans, @leaves, $node);
my ($tree_size, $orphans, %path, $leaves, $done);

my ($payload, $printable, @payload, $depth, $serial, $below, $path_to, $deepest,
    %path_to_char, $left_payload, $right_payload, $left_char, $right_char);
my ($msg, $compressed, $description, $desc_carried, $desc_in_room);

my ($dbh, $query, $sth, @record, $success);

if ($_ = $OPTIONS{"q"}) {
    $DB_NAME = $_;
    $dbh = DBI->connect("DBI:SQLite:database=${DB_NAME}.sqlite3",
                        "","");
}
else {
    $dbh = DBI->connect("DBI:mysql:database=$DB_NAME;host=$DB_HOST",
                        "$DB_USER","$DB_PASS");
};

my $db_type = ref $dbh;

my $insert_decode = "INSERT INTO decoding_tree(node,left_child,left_is_payload,"
                  . "right_child,right_is_payload) VALUES(?,?,?,?,?)";
my $insert_encode = "INSERT INTO encoding_tree(ichar,bits) VALUES(?,?)";

#########################  BEGIN FUNCTION DEFINITIONS  #########################

sub times_seen {
    my $haystack = shift;
    my $haystack1;
    my $needle = shift;
    my $times_seen = 0;
    ++$times_seen  while $haystack =~ /$needle/g;
    
    if (FALSE) {
        $haystack1 = $haystack;
        $haystack1 =~ s/($needle)/\e[1m$1\e[m/g;
        print $haystack1;
    };
    
    $times_seen;
};

sub make_equs {
    my $data = shift;
    my $output = "";
    my $sep = "    ";
    my ($head);
    while ($data) {
        if ($data =~ /^([ -!#-~]+)(.*)$/) {
            $head = $1;
            $data = $2;
            #printf "Data begins with \"%s\"\n", $head;
            $output .= $sep . sprintf "EQUS \"%s\"", $head;
            $sep = ":";
        }
        else {
            $head = unpack "C", substr $data, 0, 1;
            $data = substr $data, 1;
            #printf "Data begins with %d = &%02X\n", $head, $head;
            $output .= $sep . sprintf "EQUB &%02X", $head;
            $sep = ":";
        };
    };
    $output .= "\n";
};

sub make_equb {
    my $data = shift;
    my $output = "";
    my $max_width = shift || 80;
    my $indent = shift // 4;
    my $sep = "";
    my $line_so_far = " " x $indent;    
    my ($head, $leftover, $equ, $width_so_far, $avail);
    
    while ($data) {
        $head = unpack "C", substr $data, 0, 1;
        $data = substr $data, 1;
        #printf "Data begins with %d = &%02X\n", $head, $head;
        #$output .= $sep . sprintf "EQUB &%02X", $head;
        #$sep = ":";
        $equ = sprintf "EQUB &%02X", $head;
        if (length "$line_so_far$sep$equ" > $max_width) {
            $output .= "$line_so_far\n";
            $line_so_far = " " x $indent . $equ;
        }
        else {
            $line_so_far .= "$sep$equ";
        };
        $sep = ":";
    };
    $output .= "$line_so_far\n";
};

sub dict_entry {
    my $data = shift;
    my $output = "";
    my $sep = "    ";
    my ($head, $tail);

    # Lower case letter with trailing space => &00-&1F 
    $data =~ s/([a-z]) $/pack "C", (unpack "C", $1) & 0x1f/e;
    # Set high bit of last character    
    $data =~ s/(.)$/pack "C", (unpack "C", $1) | 0x80/e;
    
    while ($data) {
        if ($data =~ /^([ -!#-~]+)(.*)$/) {
            $head = $1;
            $data = $2;
            #printf "Data begins with \"%s\"\n", $head;
            $output .= $sep . sprintf "EQUS \"%s\"", $head;
            $sep = ":";
        }
        else {
            $head = unpack "C", substr $data, 0, 1;
            $data = substr $data, 1;
            #printf "Data begins with %d = &%02X\n", $head, $head;
            $output .= $sep . sprintf "EQUB &%02X", $head;
            $sep = ":";
        };
    };
    $output .= "\n";
};

sub printable {
    $_ = shift;
    return "" unless defined $_;
    if (/[^!#-%'-~]/) {
        return sprintf "&%02X", unpack "C", $_;
    }
    else {
        return $_;
    };
};

sub compress {
    my $text = shift;
    my $bits = "";
    my $chars = "";
    my $path;
    my ($printable, $byte, $i);
    foreach $char (split //, $text) {
        $printable = printable $char;
        $path = $path_to_char{$printable};
        # printf "Path to %-6s is '%s'\n", "'$printable'", $path;
        $bits .= $path;
    };
    # printf "Stream of bits is '%s'\n", $bits;
    # printf "Length of stream is %d\n", length $bits;
    for ($i = 0; $i < length $bits; $i += 8) {
        $byte = substr "${bits}0000000", $i, 8;
        # print "$byte ";
        $chars .= pack "B8", $byte;
    };
    $chars;
};


##########################  END FUNCTION DEFINITIONS  ##########################

#############################  READ THE DATA FILE  #############################

if ($filename) {
    my $chunk;
    open DATA,"<", $filename or die "Could not open $filename: $!";
    while (!eof DATA) {
        read DATA, $chunk, $CHUNK_SIZE;
        $data .= $chunk;
    };
    close DATA;
}
elsif ($dbh) {
    $query = "SELECT description FROM rooms ORDER BY id";
    $sth = $dbh->prepare($query);
    $sth->execute;
    while (($description) = $sth->fetchrow_array) {
        print "$description\n";
        $data .= "$description\n";
    };
    $sth->finish;
    
    $query = "SELECT message FROM system_messages ORDER BY id";
    $sth = $dbh->prepare($query);
    $sth->execute;
    while (($message) = $sth->fetchrow_array) {
        print "$message\n";
        $data .= "$message\n";
    };
    $sth->finish;

    $query = "SELECT message FROM messages ORDER BY id";
    $sth = $dbh->prepare($query);
    $sth->execute;
    while (($message) = $sth->fetchrow_array) {
        print "$message\n";
        $data .= "$message\n";
    };
    $sth->finish;

    $query = "SELECT desc_carried,desc_in_room FROM objects ORDER BY id";
    $sth = $dbh->prepare($query);
    $sth->execute;
    while (($desc_carried, $desc_in_room) = $sth->fetchrow_array) {
        print "$desc_carried\n$desc_in_room\n";
        $data .= "$desc_carried\x00$desc_in_room\n";
    };
    $sth->finish;
};

$length = length $data;

if ($DIGRAPH_MIN) {
    foreach $letter1 ("a" .. "z") {
        foreach $letter2 ("a" .. "z") {
            $digraph = "$letter1$letter2";
            $freq = times_seen $data, $digraph;
            if ($freq > $DIGRAPH_MIN) {
                $freq{$digraph} = $freq;
                #$data =~ s/$digraph//g;
            };
        };
    };
};

foreach $char (split //, $data) {
    ++$freq{$char};
};
$chars = scalar keys %freq;

printf "Total characters in input  : %d\n", $length;
printf "Number of unique characters: %d\n", $chars;

$tree = new HuffmanTree;

foreach $char (sort {$freq{$b} <=> $freq{$a} || $a cmp $b} keys %freq) {
    #                commonest to rarest        tiebreak on ASCII code
    $freq = $freq{$char};
    $payload = $char;
    $printable = printable $payload;
    print "Adding a leaf node: ";
    printf "%-4.4s %4d  %5.2f%%\n", $printable, $freq, 100 * $freq / $length;
    $node = new HuffmanTree::Node($freq, $payload);
    $tree->attach_node($node);
};

# print Dumper \$tree;

# exit;

$done = FALSE;
while (!$done) {
    @orphans = $tree->orphans;
    @orphans = sort {$a->freq <=> $b->freq || $a->below <=> $b->below} @orphans;
    #                rarest to commonest      tiebreak on shortest to longest
    $tree_size = $tree->size;
    $orphans = @orphans;
    $leaves = scalar($tree->leaves);

    printf "The tree has %d nodes of which %d are leaves and %d are orphans.\n",
            $tree_size, $leaves, $orphans;

    if ($orphans > 1) {
        my $orphan1 = $orphans[0];
        my $orphan2 = $orphans[1];
        my $print1 = join "|", $orphan1->cumulative_payload;
        my $print2 = join "|", $orphan2->cumulative_payload;
    
        printf "The least likely orphan is: '%s' (%d)\n", $print1, $orphan1->freq;
        printf "The next least likely   is: '%s' (%d)\n", $print2, $orphan2->freq;

        my $new_node = new HuffmanTree::Node(0);
        # left = likely, right = rare
        $new_node->set_right_child($orphan1);
        $new_node->set_left_child($orphan2);
        $tree->attach_node($new_node);
    }
    else {
        $tree->set_root($orphans[0]);
        $done = TRUE;
    };
};

#print Dumper \$tree;

@leaves = ();
foreach $node (@{$tree->nodes}) {
    @payload = $node->cumulative_payload;
    $freq = $node->freq;
    $depth = $node->depth;
    $serial = $node->serial;
    $below = $node->below;
    $path_to = $node->path_to;

    $payload = join "|", @payload;

    if ($node->is_leaf) {
        push @leaves, $node;
        $path{$path_to} = $node;
    };
    
    if (!defined $deepest || $deepest < $depth) {
        $deepest = $depth;
    };
    
    printf "Node #%d: path '%s': depth %d: below %d: (%d) '%s'\n",
        $serial, $path_to, $depth, $below, $freq, $payload;
};

printf "Deepest depth is %d.\n", $deepest;

print "\n";

if ($OUTPUT_FILE) {
    if ($SPLIT_FILES) {
        open FH, ">", "$TREE_FILE" or die "Could not open $TREE_FILE: $!";
    }
    else {
        open FH, ">", $OUTPUT_FILE or die "Could not open $OUTPUT_FILE: $!";
    };
};

if ($SHOW_OUTPUT) {
    print ".tree\n";
};
if ($OUTPUT_FILE) {
    print FH ".tree\n";
};

if ($WRITE_DB) {
    $dbh->do("DELETE FROM decoding_tree");
    print "Creating decoding tree .....\n";
};
$tree_size = $tree->size;
for ($i = $tree_size - 1; $i >= 0; --$i) {
    $node = $tree->get_by_pos($i);
    $left_child = $node->left_child;
    $right_child = $node->right_child;
    if (!defined $node->payload) {
        my $l = $tree_size - $left_child->serial;
        my $r = $tree_size - $right_child->serial;
        @record = ($tree_size - $i - 1);
        if ($left_child->is_leaf) {
            $left_char = 1 + 2 * unpack "C", $left_child->payload;
            #  replace \n with Beeb-ish \r
            $left_char = 27 if $left_char == 21;
            $left_payload = printable $left_child->payload;
            #  Beebify the human-readable comment, too
            $left_payload =~ s/&0A/\&0D/;
            push @record, (unpack "C", $left_child->payload), 1;
        }
        else {
            $left_char = 2 * ($tree_size - $left_child->serial);
            $left_payload = sprintf "#%-3d", $tree_size - $left_child->serial;
            push @record, $tree_size - $left_child->serial, 0;
        };
        if ($right_child->is_leaf) {
            $right_char = 1 + 2 * unpack "C", $right_child->payload;
            $right_char = 27 if $right_char == 21;
            $right_payload = printable $right_child->payload;
            $right_payload =~ s/&0A/\&0D/;
            push @record, (unpack "C", $right_child->payload), 1;
        }
        else {
            $right_char = 2 * ($tree_size - $right_child->serial);
            $right_payload = sprintf "#%-3d", $tree_size - $right_child->serial;
            push @record, $tree_size - $right_child->serial, 0;
        };
        if ($SHOW_OUTPUT) {
            printf "    EQUB &%02X:EQUB &%02X  \\  #%-3d LEFT %-4s RIGHT %-4s\n",
                $left_char, $right_char, $tree_size - $i - 1, $left_payload, $right_payload;
        };
        if ($OUTPUT_FILE) {
            printf FH "    EQUB &%02X:EQUB &%02X  \\  #%-3d LEFT %-4s RIGHT %-4s\n",
                $left_char, $right_char, $tree_size - $i - 1, $left_payload, $right_payload;
        };
        if ($WRITE_DB) {
            printf "%3d | %3d | %3d | %3d | %3d\n", @record;
            $dbh->do($insert_decode, undef, @record);
        };
    };
};

if ($SHOW_OUTPUT) {
    print "._tree_end\n";
};
if ($OUTPUT_FILE) {
    print FH "._tree_end\n";
};

if ($SPLIT_FILES && $OUTPUT_FILE) {
    close FH;
    if ($SPLIT_FILES) {
        open FH, ">", "$MTABLE_FILE" or die "Could not open $MTABLE_FILE: $!";
    };
};

if ($SHOW_OUTPUT) {
    print ".msg_table\n";
};
if ($OUTPUT_FILE) {
    print FH ".msg_table\n";
};

$i = 0;
foreach $msg (split /\n/, $data) {
    if ($OUTPUT_FILE) {
        printf FH "    EQUW %s%d\n", $MSG_PREFIX, $i;
    };
    if ($SHOW_OUTPUT) {
        printf "    EQUW %s%d\n", $MSG_PREFIX, $i;
    };
    ++$i;
};

if ($SHOW_OUTPUT) {
    print "._mtable_end\n";
};
if ($OUTPUT_FILE) {
    print FH "._mtable_end\n";
};

if ($WRITE_DB) {
    print "Creating encoding tree .....\n";
    $dbh->do("DELETE FROM encoding_tree");
};
foreach (sort {length $a <=> length $b || $b <=> $a} keys %path) {
    $payload = $path{$_}->payload;
    $char = unpack "C", $payload;
    $freq = $path{$_}->freq;
    $path_to = $path{$_}->path_to;
    $printable = printable $payload;
    $path_to_char{$printable} = $path_to;
    if ($WRITE_DB) {
        printf "%3d | %s\n", $char, $path_to;
        $dbh->do($insert_encode, undef, $char, $path_to);
    };
};

if ($SPLIT_FILES && $OUTPUT_FILE) {
    close FH;
    if ($SPLIT_FILES) {
        open FH, ">", "$STREAM_FILE" or die "Could not open $STREAM_FILE: $!";
    };
};

$i = 0;

foreach $msg (split /\n/, $data) {
    $msg = compress "$msg\n";
    if ($OUTPUT_FILE) {
        printf FH ".%s%d\n", $MSG_PREFIX, $i;
    };
    if ($SHOW_OUTPUT) {
        printf ".%s%d\n", $MSG_PREFIX, $i;
    };
    ++$i;
    $_ =  make_equb $msg;
    if ($SHOW_OUTPUT) {
        print;
    };
    if ($OUTPUT_FILE) {
        print FH;
    };
};

if ($SHOW_OUTPUT) {
    print "._game_data_end\n";
};
if ($OUTPUT_FILE) {
    print FH "._game_data_end\n";
};

if ($OUTPUT_FILE) {
    close FH;
};

#print "Database type is '$db_type'.\n";

# print Dumper $dbh;

$dbh->disconnect;

exit;
